# /*---------------------------------------------------------------------------8
# |                                                                            |
# |             SAP: Register BOM                                              |
# |         SAP ASCS: deploy ASCS Parameter file install template                |
# |         SAP ASCS: Install                                                   |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

---

- name:                                 "ASCS HA Install: Set BOM facts"
  ansible.builtin.set_fact:
    sap_inifile:                        "{{ bom_base_name }}-ASCSha-{{ ansible_hostname }}.params"
    sap_inifile_template:               "{{ bom_base_name }}-ASCSha-inifile-param.j2"
    dir_params:                         "{{ tmp_directory }}/.{{ sap_sid | lower }}-params"

#   0x) Create hidden directory for parameter files
- name:                                "ASCS HA Install: Create directories"
  ansible.builtin.file:
    path:                              "{{ item.path }}"
    state:                             directory
    mode:                              '{{ item.mode }}'
  loop:
    - { mode: '0755', path: '{{ dir_params }}' }
    - { mode: '0755', path: '{{ tmp_directory }}/{{ sid_to_be_deployed.sid | upper }}' }
    - { mode: '0755', path: '/etc/sap_deployment_automation/{{ sap_sid | upper }}' }

- name:                                "ASCS HA Install: reset"
  ansible.builtin.file:
    path:                              "/etc/sap_deployment_automation/{{ sap_sid | upper }}/sap_deployment_ASCS.txt"
    state:                             absent
  when:                                reinstall

- name:                                "ASCS HA Install: check if installed"
  ansible.builtin.stat:
    path:                              "/etc/sap_deployment_automation/{{ sap_sid | upper }}/sap_deployment_ASCS.txt"
  register:                            ASCS_installed
  when:                                node_tier == 'ASCS'

- name:                                "ASCS Install: check media exists"
  ansible.builtin.stat:
    path:                              "{{ target_media_location }}/SWPM/sapinst"
  register:                            sapinst_found

- name:                                "ErrorHandling"
  ansible.builtin.fail:
    msg:                               "INSTALL:0003:Unable to find sapinst, please check that the installation media is mounted"
  when: not sapinst_found.stat.exists


# Returns bom object
- name:                                "ASCS HA Install: Register BoM"
  ansible.builtin.include_role:
    name:                              roles-sap/3.3.1-bom-utility
    tasks_from:                        bom-register
  vars:
    bom_name:                          "{{ bom_base_name }}"
    task_prefix:                       "ASCS HA Install: "

- name:                                "ASCS HA Install: Register BoM templates"
  ansible.builtin.include_role:
    name:                              roles-sap/3.3.1-bom-utility
    tasks_from:                        bom-template
  vars:
    task_prefix:                       "ASCS HA Install: "
    always_upload_jinja_templates:     false
    bom_name:                          "{{ bom_base_name }}"
    sap_cd_package_cd1:
    sap_cd_package_cd2:
    sap_cd_package_cd3:
    sap_cd_package_cd4:
    sap_cd_package_cd5:
    sap_cd_package_hdbclient:
    sap_ciInstanceNumber:
    app_instance_number:
    sap_ciDialogWPNumber:
    sap_ciBtcWPNumber:
    sap_installSAPHostAgent:
    sap_profile_dir:
    sap_ASCS_hostname:                  "{{ ASCS_virtual_hostname }}" # "{{ query('inventory_hostnames', '{{ sap_sid | upper }}_ASCS') | first }}"
    sap_db_hostname:
    sap_ciVirtualHostname:
    sap_appVirtualHostname:
    param_directory:                   "{{ dir_params }}"
    hdb_instance_number:               "{{ db_instance_number }}"
  tags:
    - skip_ansible_lint


- name:                                "ASCS HA Install: check if installed"
  ansible.builtin.debug:
    msg:                               "ASCS HA Install flag: {{ ASCS_installed }}"
    verbosity:                         2

- name:                                "ASCS HA Install: register variables"
  ansible.builtin.set_fact:
    ASCS_bom_id:                        "{{ bom.product_ids.ASCS_ha }}"
    public:                            true

- name:                                "ASCS HA Install"
  block:

    - name:                            "ASCS HA Install: install variables"
      ansible.builtin.debug:
        msg:
          - "INIFILE:    {{ sap_inifile }}"
          - "PRODUCT ID: {{ bom.product_ids.ASCS_ha }}"
          - "HOST:       {{ ASCS_virtual_hostname }}"
        verbosity:                     2

    - name:                            "ASCS HA Install: - ASCS - Assign ownership"
      ansible.builtin.file:
        path:                          "{{ item.path }}"
        owner:                         "{{ sap_sid | lower }}adm"
        group:                         sapsys
        recurse:                       true
        state:                         directory
      loop:
        - { path: '/sapmnt/{{ sap_sid | upper }}' }
        - { path: '/usr/sap/{{ sap_sid | upper }}/SYS' }
        - { path: '/usr/sap/{{ sap_sid | upper }}/AASCS{{ ASCS_instance_number }}' }

    - name:                            "ASCS HA Install: - ASCS - comment out required message server prots in /etc/services"
      ansible.builtin.replace:
        path:                          /etc/services
        regexp:                        '^([a-z\-]+\s+36{{ ASCS_instance_number }}/.*)$'
        replace:                       '# \1'
        backup:                        true

# *====================================4=======================================8
# |  SAP ASCS: Install                                                          |
# | 2230669 - System Provisioning Using a Parameter Input File                 |
# *====================================4=======================================8

    - name:                            "Create temp directory for sid"
      ansible.builtin.file:
        path:                          "{{ tmp_directory }}/{{ sid_to_be_deployed.sid | upper }}"
        state:                         directory
        mode:                          0755

    - name:                            "ASCS HA Installation"
      ansible.builtin.debug:
        msg:                           "Starting sapinst for {{ sap_sid | upper }}. Please wait"

    - name:                            "ASCS HA Installation"
      block:
        - name:                        "ASCS HA Install: SAPInst"
          ansible.builtin.shell: |
                                       umask {{ custom_umask | default('022') }};
                                       ./sapinst SAPINST_INPUT_PARAMETERS_URL={{ dir_params }}/{{ sap_inifile }}     \
                                                 SAPINST_EXECUTE_PRODUCT_ID={{ bom.product_ids.ASCS_ha }}             \
                                                 SAPINST_SKIP_DIALOGS=true                                           \
                                                 SAPINST_START_GUISERVER=false                                       \
                                                 SAPINST_USE_HOSTNAME={{ ASCS_virtual_hostname }}
          args:
            chdir:                     "{{ target_media_location }}/SWPM"
            creates:                   "/etc/sap_deployment_automation/{{ sap_sid | upper }}/sap_deployment_ASCS.txt"
          environment:
            SAPSYSTEMNAME:             "{{ sap_sid | upper }}"
            TMPDIR:                    "{{ tmp_directory }}/{{ sid_to_be_deployed.sid | upper }}"
          register:                    ASCS_installation
          failed_when:                 ASCS_installation.rc > 0
          tags:
            - skip_ansible_lint
          when:                        node_tier == 'ASCS'
      rescue:
        # ToDO: cleanup file systems on failed install.
        # until then we validate if certain files and folders exist and take
        # actions based on them
        - name:                        "RESCUE - ASCS HA Install: Check '/usr/sap/<SAPSID>/SYS/exe/uc/linuxx86_64' exists"
          ansible.builtin.stat:
            path:                      '/usr/sap/{{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64'
          register:                    stat_sys_exe_uc
          when:                        node_tier == 'ASCS'

        - name:                        "RESCUE - ASCS HA Install: Check '/usr/sap/<SAPSID>/SYS/exe/uc/linuxx86_64' is empty"
          ansible.builtin.find:
            path:                      '/usr/sap/{{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64'
            patterns:                  "*"
            file_type:                 directory
          register:                    find_sys_exe_uc_result
          when:
            - node_tier == 'ASCS'
            - stat_sys_exe_uc.stat.exists

        # At this stage the DIR_CT_RUN,'/usr/sap/<SAPSID>/SYS/exe/uc/linuxx86_64'
        # is expected to be empty so we delete it.
        # nw.directoryIsNotEmptyUnattended
        - name:                        "RESCUE - ASCS HA Install: Show installation result"
          ansible.builtin.debug:
            var:                       ASCS_installation
          when:                        ASCS_installation is defined

        - name:                        "RESCUE - ASCS HA Install: Cleanup '/usr/sap/{{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64'"
          ansible.builtin.file:
            path:                      "/usr/sap/{{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64"
            state:                     absent
          when:
            - node_tier == 'ASCS'
            - find_sys_exe_uc_result is defined
            - find_sys_exe_uc_result | length > 0

        - name:                        "RESCUE - ASCS HA Install: - ASCS - Assign ownership"
          ansible.builtin.file:
            path:                      "{{ item.path }}"
            owner:                     "{{ sap_sid | lower }}adm"
            group:                     sapsys
            recurse:                   true
            state:                     directory
          loop:
            - { path: '/sapmnt/{{ sap_sid | upper }}' }
            - { path: '/usr/sap/{{ sap_sid | upper }}/SYS' }
            - { path: '/usr/sap/{{ sap_sid | upper }}/AASCS{{ ASCS_instance_number }}' }
          when:                        node_tier == 'ASCS'

        # Add IS_HOST_LOCAL_USING_STRING_COMPARE=true to fix The host with the
        # name <host> is not a valid virtual host on the local host
        # SAP Note# 2279110
        - name:                            "Create temp directory for sid"
          ansible.builtin.file:
            path:                          "{{ tmp_directory }}/{{ sid_to_be_deployed.sid | upper }}"
            state:                         directory
            mode:                          0755

        - name:                        "RESCUE - ASCS HA Install: SAPINST"
          ansible.builtin.command: |
                                       ./sapinst SAPINST_INPUT_PARAMETERS_URL={{ dir_params }}/{{ sap_inifile }}     \
                                                 SAPINST_EXECUTE_PRODUCT_ID={{ bom.product_ids.ASCS_ha }}             \
                                                 SAPINST_SKIP_DIALOGS=true                                           \
                                                 SAPINST_START_GUISERVER=false                                       \
                                                 SAPINST_USE_HOSTNAME={{ ASCS_virtual_hostname }}                     \
                                                 IS_HOST_LOCAL_USING_STRING_COMPARE=true
          args:
            chdir:                     "{{ target_media_location }}/SWPM"
            creates:                   "/etc/sap_deployment_automation/{{ sap_sid | upper }}/sap_deployment_ASCS.txt"
          environment:
            SAPSYSTEMNAME:             "{{ sap_sid | upper }}"
            TMPDIR:                    "{{ tmp_directory }}/{{ sid_to_be_deployed.sid | upper }}"
          register:                    ASCS_installation
          failed_when:                 ASCS_installation.rc > 0
          tags:
            - skip_ansible_lint
          when:                        node_tier == 'ASCS'

    - name:                            "ASCS HA Install: Installation results"
      ansible.builtin.debug:
        var:                           ASCS_installation
      when:                            ASCS_installation.rc > 0

    - name:                            "ASCS HA Install: Installation results"
      ansible.builtin.debug:
        msg:                           "ASCS HA Installation succeeded"
      when:                            ASCS_installation.rc == 0

    - name:                            "ASCS HA Install: Cleanup ini file {{ ansible_hostname }}"
      ansible.builtin.file:
        path:                          "{{ dir_params }}/{{ sap_inifile }}"
        state:                         absent

    - name:                            "ASCS HA Install: flag"
      ansible.builtin.file:
        path:                          "/etc/sap_deployment_automation/{{ sap_sid | upper }}/sap_deployment_ASCS.txt"
        state:                         touch
        mode:                          0755

  when:
    - node_tier == 'ASCS'
    - not ASCS_installed.stat.exists

- name:                                "ASCS Install status"
  block:

    - name:                            "ASCS Install status"
      ansible.builtin.debug:
        msg:                           "ASCS is already installed"

    - name:                            "ASCS: - return value"
      ansible.builtin.set_fact:
        ASCS_already_installed:         true
  when:
    - node_tier == 'ASCS'
    - ASCS_installed.stat.exists

- name:                                "ASCSERS - Enqueue Server Setup"
  block:
    - name:                            "ASCSERS - Get the variable to determine ENSA version"
      become_user:                     "{{ sap_sid | lower }}adm"
      ansible.builtin.shell:           "{{ sapcontrolASCS_command }} -host {{ ASCS_virtual_hostname }} -function GetProcessList"
      environment:
        PATH:                          /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/sap/{{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64:/usr/sap/{{ sap_sid | upper }}/SYS/exe/run:/home/{{ sap_sid | lower }}adm
        DIR_LIBRARY:                   /usr/sap/{{ sap_sid | upper }}/SYS/exe/run
        LD_LIBRARY_PATH:               /usr/sap/{{ sap_sid | upper }}/SYS/exe/run:/usr/sap/{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64
        SAPSYSTEMNAME:                 "{{ sap_sid | upper }}"
      register:                        enq_server
      failed_when:                     enq_server.rc > 3
      changed_when:                    false

    # enserver, EnqueueServer
    - name:                            "ASCSERS - Is ENSA1"
      ansible.builtin.set_fact:
        ensa1:                         "{{ enq_server.stdout_lines | select('search', 'enserver') | length > 0 }}"

    # enq_server, Enqueue Server 2
    - name:                            "ASCSERS - Is ENSA2"
      ansible.builtin.set_fact:
        ensa2:                         "{{ enq_server.stdout_lines | select('search', 'enq_server') | length > 0 }}"

    - name:                            "ASCSERS - Print the value of ENSA1/ENSA2"
      ansible.builtin.debug:
        msg:
          - "{{ ensa1 }}"
          - "{{ ensa2 }}"
  when:
    - inventory_hostname == primary_instance_name

...
# /*---------------------------------------------------------------------------8
# |                                   END                                      |
# +------------------------------------4--------------------------------------*/
